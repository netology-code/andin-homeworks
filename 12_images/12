class PostViewModel : ViewModel() {


    fun likeById(id: Long) {
        viewModelScope.launch {
            try {
                repository.likeById(id)
            } catch (e: Exception) {

            }
        }
    }

    fun removeById(id: Long) {
        viewModelScope.launch {
            try {
                repository.removeById(id)
            } catch (e: Exception) {

            }
        }
    }
}

class PostRepositoryImpl : PostRepository {

    override suspend fun removeById(id: Long) {

        dao.removeById(id)

        api.removeById(id)
    }

    override suspend fun likeById(id: Long) {
        val post = dao.getById(id)
        dao.save(post.copy(liked = !post.liked))
        api.likeById(id)
    }
}


class FullScreenImageFragment : Fragment() {
    private var _binding: FragmentFullScreenImageBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentFullScreenImageBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        val imageUrl = arguments?.getString("IMAGE_URL")
        Glide.with(this).load(imageUrl).into(binding.imageView)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}


class PostFragment : Fragment() {

    private fun setupListeners() {

        imageView.setOnClickListener {
            val action = PostFragmentDirections.actionPostFragmentToFullScreenImageFragment(imageUrl)
            findNavController().navigate(action)
        }
    }
}
